/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Gossiperl.Client.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DigestSubscription : TBase
  {

    public string Event_type { get; set; }

    public string Member_name { get; set; }

    public string Origin { get; set; }

    public long Heartbeat { get; set; }

    public DigestSubscription() {
    }

    public DigestSubscription(string event_type, string member_name, string origin, long heartbeat) : this() {
      this.Event_type = event_type;
      this.Member_name = member_name;
      this.Origin = origin;
      this.Heartbeat = heartbeat;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_event_type = false;
      bool isset_member_name = false;
      bool isset_origin = false;
      bool isset_heartbeat = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Event_type = iprot.ReadString();
              isset_event_type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Member_name = iprot.ReadString();
              isset_member_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Origin = iprot.ReadString();
              isset_origin = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Heartbeat = iprot.ReadI64();
              isset_heartbeat = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_event_type)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_member_name)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_origin)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_heartbeat)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DigestSubscription");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "event_type";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Event_type);
      oprot.WriteFieldEnd();
      field.Name = "member_name";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Member_name);
      oprot.WriteFieldEnd();
      field.Name = "origin";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Origin);
      oprot.WriteFieldEnd();
      field.Name = "heartbeat";
      field.Type = TType.I64;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Heartbeat);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DigestSubscription(");
      sb.Append("Event_type: ");
      sb.Append(Event_type);
      sb.Append(",Member_name: ");
      sb.Append(Member_name);
      sb.Append(",Origin: ");
      sb.Append(Origin);
      sb.Append(",Heartbeat: ");
      sb.Append(Heartbeat);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
